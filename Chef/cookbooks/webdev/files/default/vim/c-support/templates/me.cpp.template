$%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
$
== cpp.cin ==
cin >> <CURSOR>;
$
== cpp.cout ==
cout << <CURSOR> << endl;
$
== cpp.cout-operator == insert ==
<< "<CURSOR>" 
$
$%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
== cpp.output-manipulator-boolalpha       == insert ==
<< boolalpha <CURSOR>
== cpp.output-manipulator-dec             == insert ==
<< dec <CURSOR>
== cpp.output-manipulator-endl            == insert ==
<< endl <CURSOR>
== cpp.output-manipulator-fixed           == insert ==
<< fixed <CURSOR>
== cpp.output-manipulator-flush           == insert ==
<< flush <CURSOR>
== cpp.output-manipulator-hex             == insert ==
<< hex <CURSOR>
== cpp.output-manipulator-internal        == insert ==
<< internal <CURSOR>
== cpp.output-manipulator-left            == insert ==
<< left <CURSOR>
== cpp.output-manipulator-oct             == insert ==
<< oct <CURSOR>
== cpp.output-manipulator-right           == insert ==
<< right <CURSOR>
== cpp.output-manipulator-scientific      == insert ==
<< scientific <CURSOR>
== cpp.output-manipulator-setbase         == insert ==
<< setbase(10<CURSOR>) 
== cpp.output-manipulator-setfill         == insert ==
<< setfill(<CURSOR>) 
== cpp.output-manipulator-setiosflag      == insert ==
<< setiosflags(<CURSOR>) 
== cpp.output-manipulator-setprecision    == insert ==
<< setprecision(6<CURSOR>) 
== cpp.output-manipulator-setw            == insert ==
<< setw(0<CURSOR>) 
== cpp.output-manipulator-showbase        == insert ==
<< showbase <CURSOR>
== cpp.output-manipulator-showpoint       == insert ==
<< showpoint <CURSOR>
== cpp.output-manipulator-showpos         == insert ==
<< showpos <CURSOR>
== cpp.output-manipulator-uppercase       == insert ==
<< uppercase <CURSOR>
$%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
== cpp.method-implementation ==
void<CURSOR> |?CLASSNAME|::|?METHODNAME| (<+argument list+>)
{
  return ;
}

$%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
== cpp.accessor-implementation ==
/**
 * Get |?ATTRIBUTE|
 * 
 * @return
 * @retval
 */
inline int<CURSOR> |?CLASSNAME|::|ATTRIBUTE|()
{
  return |ATTRIBUTE|;
}

/**
 * Set |ATTRIBUTE|
 * 
 * @param 
 * @return void
 */
inline void |CLASSNAME|::|ATTRIBUTE|(<+argument list+>)
{
  |ATTRIBUTE| = value;
  return ;
}

$%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
== cpp.class-definition ==
/**
 * <CURSOR>
 */
class |CLASSNAME|
{
public:
  /**
   * Constructor
   */
  |CLASSNAME|();

  // ====================  ACCESSORS     =======================================

  // ====================  MUTATORS      =======================================

  // ====================  OPERATORS     =======================================

protected:
  // ====================  DATA MEMBERS  =======================================

private:
  // ====================  DATA MEMBERS  =======================================

};

$%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
== cpp.class-implementation ==
/**
 * <CURSOR>
 */
|CLASSNAME|::|CLASSNAME|()
{<CURSOR>
}

$%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
== cpp.class-using-new-definition ==
/**
 * <CURSOR>
 */
class |?CLASSNAME|
{
public:
  /**
   * Constructor
   */
  |CLASSNAME|();                       

  /**
   * Copy constructor
   */
  |CLASSNAME|(const |CLASSNAME| &other);

  /**
   * Destructor
   */
  virtual ~|CLASSNAME|();

  // ====================  ACCESSORS     =======================================

  // ====================  MUTATORS      =======================================

  // ====================  OPERATORS     =======================================

  // ====================  OPERATORS     =======================================

  /**
   * Assignment operator
   */
  |CLASSNAME|& operator=(const |CLASSNAME| &other);

protected:
  // ====================  DATA MEMBERS  =======================================

private:
  // ====================  DATA MEMBERS  =======================================

};

$%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
== cpp.class-using-new-implementation ==
|CLASSNAME|::|CLASSNAME|()
{<CURSOR>
}

|CLASSNAME|::|CLASSNAME|(const |CLASSNAME| &other)
{
}

|CLASSNAME|::~|CLASSNAME|()
{
}

|CLASSNAME|& |CLASSNAME|::operator = (const |CLASSNAME| &other)
{
  if (this != &other) 
  {
  }

  return *this;
}

$%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
== cpp.error-class ==
/**
 * <CURSOR>
 */
class |CLASSNAME|
{
public:
  /**
   * Constructor
   */
  |CLASSNAME|(const string &msg = "|CLASSNAME|")
    :mMessage(msg)
  { 
  }

  /**
   * Destructor
   */
  virtual ~|CLASSNAME|()  
  { 
  }

  /**
   * What error message it represents.
   *
   * @return string
   * @retval error message
   */
  virtual string what() const throw ()  
  { 
    return mMessage; 
  }

protected:  
  string  mMessage;
};

$%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
== cpp.template-method-implementation ==
template <class T>
void<CURSOR> |?CLASSNAME|<T>::|?METHODNAME|(<+argument list+>)
{
  return ;
}
$%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
== cpp.template-accessor-implementation ==
/**
 * Get 
 * 
 * @return
 * @retval
 */
template <class T>
inline  int<CURSOR> |CLASSNAME|<T>::get|ATTRIBUTE|()
{
  return |ATTRIBUTE|;
}

/**
 * Set 
 * 
 * @return void
 */
template <class T>
inline  void |CLASSNAME|<T>::set|ATTRIBUTE|(<+argument list+>)
{
  |ATTRIBUTE| = value;
  return ;
}
$%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
== cpp.template-class-definition ==
/**
 * <CURSOR>
 */
template <class T>
class |CLASSNAME|
{
public:

  |CLASSNAME| ();

  // ====================  ACCESSORS     =======================================

  // ====================  MUTATORS      =======================================

  // ====================  OPERATORS     =======================================

protected:
  // ====================  DATA MEMBERS  =======================================

private:
  // ====================  DATA MEMBERS  =======================================

};

$%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
== cpp.template-class-implementation ==
//--------------------------------------------------------------------------------------
//       Class:  |?CLASSNAME|
//      Method:  |CLASSNAME|
// Description:  constructor
//--------------------------------------------------------------------------------------
template < class T >
|CLASSNAME| <T>:: |CLASSNAME| ()
{<CURSOR>
}  // -----  end of constructor of template class |CLASSNAME|  -----

$%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
== cpp.template-class-using-new-definition ==
// =====================================================================================
//        Class:  |?CLASSNAME:c|
//  Description:  <CURSOR>
// =====================================================================================

template < class T >
class |CLASSNAME|
{
public:

  // ====================  LIFECYCLE     =======================================
  |CLASSNAME| ();                           // constructor
  |CLASSNAME| (const |CLASSNAME| &other); // copy constructor
  ~|CLASSNAME| ();                          // destructor

  // ====================  ACCESSORS     =======================================

  // ====================  MUTATORS      =======================================

  // ====================  OPERATORS     =======================================

  |CLASSNAME|& operator = (const |CLASSNAME| &other); // assignment operator

protected:
  // ====================  DATA MEMBERS  =======================================

private:
  // ====================  DATA MEMBERS  =======================================

};

$%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
== cpp.template-class-using-new-implementation ==
//--------------------------------------------------------------------------------------
//       Class:  |?CLASSNAME|
//      Method:  |CLASSNAME|
// Description:  constructor
//--------------------------------------------------------------------------------------
template < class T >
|CLASSNAME|<T>::|CLASSNAME| ()
{
}

//--------------------------------------------------------------------------------------
//       Class:  |CLASSNAME|
//      Method:  |CLASSNAME|
// Description:  copy constructor
//--------------------------------------------------------------------------------------
template < class T >
|CLASSNAME|<T>::|CLASSNAME| (const |CLASSNAME| &other)
{<CURSOR>
}  // -----  end of copy constructor of template class |CLASSNAME|  -----

//--------------------------------------------------------------------------------------
//       Class:  |CLASSNAME|
//      Method:  ~|CLASSNAME|
// Description:  destructor
//--------------------------------------------------------------------------------------
template < class T >
|CLASSNAME|<T>::~|CLASSNAME| ()
{
}  // -----  end of destructor of template class |CLASSNAME|  -----

//--------------------------------------------------------------------------------------
//       Class:  |CLASSNAME|
//      Method:  operator =
// Description:  assignment operator
//--------------------------------------------------------------------------------------
template < class T >
|CLASSNAME|<T>& |CLASSNAME|<T>::operator = (const |CLASSNAME| &other)
{
  if (this != &other) {
  }
  return *this;
}  // -----  end of assignment operator of template class |CLASSNAME|  -----

$%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
== cpp.template-function ==
template <class T>
void<CURSOR> |?TEMPALTE_FUNCTION_NAME| (<+argument list+>)
{
  return ;
}  // -----  end of template function |?TEMPALTE_FUNCTION_NAME|  -----
$%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
== cpp.operator-in ==
ostream &
operator << (ostream & os, const |?CLASSNAME| & obj)
{
  os << obj.<CURSOR> ;
  return os;
}  // -----  end of function operator <<  -----
$%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
== cpp.operator-out ==
istream &
operator >> (istream & is, |?CLASSNAME| & obj)
{
  is >> obj.<CURSOR> ;
  return is;
}  // -----  end of function operator >>  -----
$%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
== cpp.try-catch ==
try {
<SPLIT>}
catch (const <CURSOR> &ExceptObj) {  // handle exception:
}
catch (...) {  // handle exception: unspecified
}

$%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
== cpp.catch ==
catch (<CURSOR>const &ExceptObj) {  // handle exception:
<SPLIT>}
$%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
== cpp.catch-points ==
catch (...) {  // handle exception:
<SPLIT>}
$%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
== cpp.extern ==
extern "C" {<CURSOR>
<SPLIT>}
$%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
== cpp.open-input-file ==
string    ifs_file_name = "<CURSOR>";                 // input  file name
ifstream  ifs;                                // create ifstream object

ifs.open (ifs_file_name.c_str());           // open ifstream
if (!ifs) {
  cerr << "\nERROR : failed to open input  file " << ifs_file_name << endl;
  exit (EXIT_FAILURE);
}
<SPLIT>{-continue here-}
ifs.close ();                                 // close ifstream
$%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
== cpp.open-output-file ==
string    ofs_file_name = "<CURSOR>";                 // input  file name
ofstream  ofs;                                // create ofstream object

ofs.open (ofs_file_name.c_str());           // open ofstream
if (!ofs) {
  cerr << "\nERROR : failed to open output file " << ofs_file_name << endl;
  exit (EXIT_FAILURE);
}
<SPLIT>{-continue here-}
ofs.close ();                                 // close ofstream
$%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
== cpp.namespace-std ==
using namespace std;
== cpp.namespace ==
using namespace |?NAMESPACE|;
== cpp.namespace-block ==
namespace |?NAMESPACE| 
{
<CURSOR>
<SPLIT>
}
== cpp.namespace-alias ==
namespace |?NAMESPACE_ALIAS| = {-original namespace name-};
$%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
== cpp.rtti-typeid == insert ==
typeid(<CURSOR><SPLIT>)
$
== cpp.rtti-static-cast == insert ==
static_cast<>(<CURSOR><SPLIT>)
$
== cpp.rtti-const-cast == insert ==
const_cast<>(<CURSOR><SPLIT>)
$
== cpp.rtti-reinterpret-cast == insert ==
reinterpret_cast<>(<CURSOR><SPLIT>)
$
== cpp.rtti-dynamic-cast == insert ==
dynamic_cast<>(<CURSOR><SPLIT>)
$%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
